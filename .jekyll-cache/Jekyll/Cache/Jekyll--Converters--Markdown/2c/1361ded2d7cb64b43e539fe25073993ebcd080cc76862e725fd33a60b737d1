I"2<p>There are whopping 4 ways to invoke a lambda (or a proc) in Ruby:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">lambda</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>

<span class="nb">lambda</span><span class="p">[</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">]</span>

<span class="nb">lambda</span><span class="o">.</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>

<span class="c1"># works only with one argument lambdas</span>
<span class="nb">lambda</span> <span class="o">===</span> <span class="n">arg</span>
</code></pre></div></div>

<p>The last option <code class="language-plaintext highlighter-rouge">Proc#===</code> is a special case, that’s quite useful
in <a href="/articles/2013/09/24/lambdas-slash-procs-in-case-expressions/">case expressions</a>,
but should never the used directly.</p>

<p>Of the three general purpose <code class="language-plaintext highlighter-rouge">Proc</code> methods that are available (it’s
actually just one method with two aliases) I’d strongly encourage you
to stick with<code class="language-plaintext highlighter-rouge">Proc#call</code>. The reasons are quite simple:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">lambda[arg]</code> looks like an index access on some data structure and you’d certainly
have to analyze the code context to understand what’s going on (especially since the <code class="language-plaintext highlighter-rouge">lambda</code> is unlikely to actually be named
<code class="language-plaintext highlighter-rouge">lambda</code> in actual code ).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">lambda.(arg)</code> is a cute syntactic trick, but it’s really easy to overlook the <code class="language-plaintext highlighter-rouge">.</code> and assume that this is a normal
method call (which probably was the point when this syntax was introduced). <code class="language-plaintext highlighter-rouge">lambda</code>s in Ruby are not real lambdas (they are instances of the <code class="language-plaintext highlighter-rouge">Proc</code> class) and we should simply embrace this fact instead of trying to hide it behind awkward syntax.</p>
  </li>
</ul>

<p>I value code clarity and readability immensely and I’m not particularly fond of excessive usage of
operator overloading. The use of operators for lambda invocations in Ruby represents the ugly side of operator overloading -
instead of increasing the readability of the code, the operators actually decrease it.</p>
:ET