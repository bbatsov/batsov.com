I"¸)<p>As APIs evolve itâ€™s inevitable that portions of them will be deprecated. Generally itâ€™s fairly
easy to find out whatâ€™s deprecated, but for several reasons thatâ€™s not the case in Ruby:</p>

<ul>
  <li>Deprecation is done through the use of C functions such as <code class="language-plaintext highlighter-rouge">rb_warn</code> &amp; <code class="language-plaintext highlighter-rouge">rb_warning</code> (as opposed to some more
transparent methods as Javaâ€™s <code class="language-plaintext highlighter-rouge">@deprecated</code> annotation). To see the deprecation messages from those functions
youâ€™ll have to run Ruby with <code class="language-plaintext highlighter-rouge">-w</code>. Consider this example code:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span><span class="p">.</span><span class="nf">lines</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">line</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -w test.rb

../test.rb:1: warning: passing a block to String#lines is deprecated
</code></pre></div></div>

<ul>
  <li>
    <p>Alternative Ruby implementations (like <code class="language-plaintext highlighter-rouge">JRuby</code> and <code class="language-plaintext highlighter-rouge">Rubinius</code>)
generally donâ€™t produce the same deprecation warnings. For instance -
<code class="language-plaintext highlighter-rouge">JRuby</code> doesnâ€™t produce any warnings for the code listed above. One
can say that currently deprecations are an MRI implementation detail
(although they shouldnâ€™t be).</p>
  </li>
  <li>
    <p>Deprecations are rarely mentioned in the API docs.</p>
  </li>
  <li>
    <p>Thereâ€™s no easy way to find out in which version of Ruby
something got deprecated as <code class="language-plaintext highlighter-rouge">rb_warn</code> is a generic instrumentation for
producing all sorts of warnings, as opposed to something created specifically to handle
deprecations.</p>
  </li>
  <li>
    <p>Some APIs are deprecated only informally (like
<a href="/articles/2013/08/21/the-elements-of-style-in-ruby-number-9-hash-number-has-key-and-hash-number-has-value-are-deprecated/"><code class="language-plaintext highlighter-rouge">Hash#has_key?</code> and <code class="language-plaintext highlighter-rouge">Hash#has_value?</code></a>).</p>
  </li>
  <li>
    <p>Some APIs are deprecated with <code class="language-plaintext highlighter-rouge">Kernel#warn</code> (like <code class="language-plaintext highlighter-rouge">Digest::Digest</code>).</p>
  </li>
</ul>

<p>All of the above makes it fairly hard to compile a precise list of deprecations, but weâ€™ll go
only for a rough cut here. Let see what we can doâ€¦</p>

<p>Grepping in Ruby 2.1â€™s code base reveals the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dir.c
2174:    rb_warning("Dir.exists? is a deprecated name, use Dir.exist? instead");

enumerator.c
355:    rb_warn("Enumerator.new without a block is deprecated; use Object#to_enum");

ext/dbm/dbm.c
338:    rb_warn("DBM#index is deprecated; use DBM#key");

ext/gdbm/gdbm.c
453:    rb_warn("GDBM#index is deprecated; use GDBM#key");

ext/openssl/ossl_cipher.c
217:    rb_warn("arguments for %s#encrypt and %s#decrypt were deprecated; "

ext/sdbm/init.c
331:    rb_warn("SDBM#index is deprecated; use SDBM#key");

ext/stringio/stringio.c
656:    rb_warn("StringIO#bytes is deprecated; use #each_byte instead");
876:    rb_warn("StringIO#chars is deprecated; use #each_char instead");
920:    rb_warn("StringIO#codepoints is deprecated; use #each_codepoint instead");
1124:    rb_warn("StringIO#lines is deprecated; use #each_line instead");

ext/zlib/zlib.c
3892:    rb_warn("Zlib::GzipReader#bytes is deprecated; use #each_byte instead");
4174:    rb_warn("Zlib::GzipReader#lines is deprecated; use #each_line instead");

file.c
1413:    rb_warning("%sexists? is a deprecated name, use %sexist? instead", s, s);

hash.c
529:            rb_warn("ignoring wrong elements is deprecated, remove them explicitly");
934:    rb_warn("Hash#index is deprecated; use Hash#key");
3470:    rb_warn("ENV.index is deprecated; use ENV.key");

io.c
3385:    rb_warn("IO#lines is deprecated; use #each_line instead");
3436:    rb_warn("IO#bytes is deprecated; use #each_byte instead");
3590:    rb_warn("IO#chars is deprecated; use #each_char instead");
3697:    rb_warn("IO#codepoints is deprecated; use #each_codepoint instead");
11196:    rb_warn("ARGF#lines is deprecated; use #each_line instead");
11243:    rb_warn("ARGF#bytes is deprecated; use #each_byte instead");
11282:    rb_warn("ARGF#chars is deprecated; use #each_char instead");
11321:    rb_warn("ARGF#codepoints is deprecated; use #each_codepoint instead");

object.c
991:    rb_warning("untrusted? is deprecated and its behavior is same as tainted?");
1005:    rb_warning("untrust is deprecated and its behavior is same as taint");
1020:    rb_warning("trust is deprecated and its behavior is same as untaint");

proc.c
663:    rb_warn("rb_f_lambda() is deprecated; use rb_block_proc() instead");

string.c
6407:       rb_warning("passing a block to String#lines is deprecated");
6576:       rb_warning("passing a block to String#bytes is deprecated");
6665:       rb_warning("passing a block to String#chars is deprecated");
6769:       rb_warning("passing a block to String#codepoints is deprecated");

vm_method.c
54:    rb_warning("rb_clear_cache() is deprecated.");
</code></pre></div></div>

<p>Below is a cleaned up list of the output shown above. Iâ€™ve removed everything
thatâ€™s unlikely to be of general interest.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Dir.exists?</code> is a deprecated name, use <code class="language-plaintext highlighter-rouge">Dir.exist?</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">Enumerator.new</code> without a block is deprecated; use <code class="language-plaintext highlighter-rouge">Object#to_enum</code></li>
  <li><code class="language-plaintext highlighter-rouge">StringIO#bytes</code> is deprecated; use <code class="language-plaintext highlighter-rouge">StringIO#each_byte</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">StringIO#chars</code> is deprecated; use <code class="language-plaintext highlighter-rouge">StringIO#each_char</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">StringIO#codepoints</code> is deprecated; use <code class="language-plaintext highlighter-rouge">StringIO#each_codepoint</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">StringIO#lines</code> is deprecated; use <code class="language-plaintext highlighter-rouge">StringIO#each_line</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">File.exists?</code> is a deprecated name, use <code class="language-plaintext highlighter-rouge">File.exist?</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">Hash#index</code> is deprecated; use <code class="language-plaintext highlighter-rouge">Hash#key</code></li>
  <li><code class="language-plaintext highlighter-rouge">ENV.index</code> is deprecated; use <code class="language-plaintext highlighter-rouge">ENV.key</code></li>
  <li><code class="language-plaintext highlighter-rouge">IO#lines</code> is deprecated; use <code class="language-plaintext highlighter-rouge">IO#each_line</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">IO#bytes</code> is deprecated; use <code class="language-plaintext highlighter-rouge">IO#each_byte</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">IO#chars</code> is deprecated; use <code class="language-plaintext highlighter-rouge">IO#each_char</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">IO#codepoints</code> is deprecated; use <code class="language-plaintext highlighter-rouge">IO#each_codepoint</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">ARGF#lines</code> is deprecated; use <code class="language-plaintext highlighter-rouge">ARGF#each_line</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">ARGF#bytes</code> is deprecated; use <code class="language-plaintext highlighter-rouge">ARGF#each_byte</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">ARGF#chars</code> is deprecated; use <code class="language-plaintext highlighter-rouge">ARGF#each_char</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">ARGF#codepoints</code> is deprecated; use <code class="language-plaintext highlighter-rouge">ARGF#each_codepoint</code> instead</li>
  <li><code class="language-plaintext highlighter-rouge">Object#untrusted?</code> is deprecated and its behavior is same as <code class="language-plaintext highlighter-rouge">Object#tainted?</code></li>
  <li><code class="language-plaintext highlighter-rouge">Object#untrust</code> is deprecated and its behavior is same as <code class="language-plaintext highlighter-rouge">Object#taint</code></li>
  <li><code class="language-plaintext highlighter-rouge">Object#trust</code> is deprecated and its behavior is same as <code class="language-plaintext highlighter-rouge">Object#untaint</code></li>
  <li>passing a block to <code class="language-plaintext highlighter-rouge">String#lines</code> is deprecated</li>
  <li>passing a block to <code class="language-plaintext highlighter-rouge">String#bytes</code> is deprecated</li>
  <li>passing a block to <code class="language-plaintext highlighter-rouge">String#chars</code> is deprecated</li>
  <li>passing a block to <code class="language-plaintext highlighter-rouge">String#codepoints</code> is deprecated</li>
</ul>

<p>Unfortunately thereâ€™s no way to know in which version of Ruby
something got deprecated. Obviously most of the things on the list
were deprecated before Ruby 2.1. Ideally in the future weâ€™ll get a
better deprecation mechanism that actually keeps track of such data.</p>

<p>Hopefully some of you will find this information useful!</p>

<p>Weâ€™re planning to get some deprecation tracking in <a href="https://github.com/bbatsov/rubocop">RuboCop</a>, but
due to Rubyâ€™s dynamic nature implementing such a feature reliably in a static code analyzer is an
impossible task.</p>
:ET