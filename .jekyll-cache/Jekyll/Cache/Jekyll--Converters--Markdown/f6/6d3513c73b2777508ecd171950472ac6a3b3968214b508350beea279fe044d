I"ﬂ<h2 id="prelude">Prelude</h2>

<p>If there is something that people love as much as tweaking their
editing configurations it‚Äôs probably the selection of color themes. A
good color theme can make your work much more pleasant and a bad one
that literally impair your vision. It‚Äôs a fact of life that I‚Äôm a firm
supporter of low-contrast color themes with dark backgrounds - I find
them easy on the eyes and I feel that they don‚Äôt strain the eyes as
much as most themes. I‚Äôve even ported a couple of popular themes to
Emacs - <a href="https://github.com/bbatsov/zenburn-emacs">Zenburn</a> and
<a href="https://github.com/bbatsov/solarized-emacs">Solarized</a>.</p>

<p>In this short article we‚Äôll see how color theming has changed in Emacs
24 and I‚Äôll share with you a few tips on theme creation and
distribution.</p>

<!--more-->

<h2 id="color-theming-in-emacs-24">Color Theming in Emacs 24</h2>

<p>Prior to Emacs 24 the most popular way to incorporate custom color
themes into Emacs was the
<a href="http://www.emacswiki.org/emacs/ColorTheme">color-theme package</a>. While
it usually got the job done it had some problems that I won‚Äôt be
discussing here and more importantly - it‚Äôs a third-party package,
that‚Äôs not part of Emacs proper.</p>

<p><a href="/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>
finally introduced a new standard way of dealing with color themes
(based on Emacs‚Äôs built-in customize facility). While it doesn‚Äôt have
a proper name (as far as I know) it‚Äôs commonly referred to as the
<code class="language-plaintext highlighter-rouge">deftheme</code> facility, since <code class="language-plaintext highlighter-rouge">deftheme</code> is the name of the macro you‚Äôd
use to create such a theme. ( <code class="language-plaintext highlighter-rouge">deftheme</code> has actually been around
since Emacs 23, but it was heavily improved in Emacs 24 )</p>

<p>Emacs 24 comes with a selection of built-in themes that you can choose
from, so you‚Äôre no longer bound to the default theme (which I find
quite ugly). To choose a new theme just do a <code class="language-plaintext highlighter-rouge">M-x load-theme</code> (tab
completion is available for the names of the available themes). At
this point you can give the command a try with the <code class="language-plaintext highlighter-rouge">tango</code> theme. If you
like a theme so much that you‚Äôd want to use it all the time you can
put in your Emacs configuration (<code class="language-plaintext highlighter-rouge">.emacs</code> or <code class="language-plaintext highlighter-rouge">init.el</code> for instance) like this:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">load-theme</span> <span class="ss">'theme-name</span> <span class="no">t</span><span class="p">)</span>
</code></pre></div></div>

<p>If you‚Äôd like to return to the default-theme just do a <code class="language-plaintext highlighter-rouge">M-x disable-theme</code>.</p>

<p>How do you create a <code class="language-plaintext highlighter-rouge">deftheme</code> theme? Quite simply actually - just do
a ‚ÄúM-x customize-create-theme‚Äù. You‚Äôll be presented with an UI
prompting you for a theme name, description and faces. After you save
the theme a file called <code class="language-plaintext highlighter-rouge">name-theme.el</code> will be written on your
filesystem. Here‚Äôs its skeleton:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">deftheme</span> <span class="nv">demo</span>
  <span class="s">"Demo theme"</span><span class="p">)</span>

<span class="p">(</span><span class="nv">custom-theme-set-faces</span>
 <span class="ss">'demo</span>
 <span class="c1">;;; list of custom faces</span>
 <span class="p">)</span>

<span class="p">(</span><span class="nv">provide-theme</span> <span class="ss">'demo</span><span class="p">)</span>
</code></pre></div></div>

<p>There was also an online theme generator
<a href="http://elpa.gnu.org/themes/">here</a>, but it seems to be down at the
moment.</p>

<p>Personally I dislike customize a lot, so when I needed to create a
Emacs 24 theme for the first time I‚Äôve just opened the source code of
the built-in tango theme and used it as a reference.</p>

<p>Once you‚Äôve created the new theme you‚Äôll have to drop it in a folder
that‚Äôs on the <code class="language-plaintext highlighter-rouge">custom-theme-load-path</code>. I‚Äôd suggest the following:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'custom-theme-load-path</span> <span class="s">"~/.emacs.d/themes"</span><span class="p">)</span>
</code></pre></div></div>

<p>If you‚Äôre an <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>
user you‚Äôre already covered. This folder exists and is automatically
added to <code class="language-plaintext highlighter-rouge">custom-theme-load-path</code> by Prelude, so all you have to do is
drop there the themes you‚Äôd want to try out.</p>

<p>You may find the
<a href="http://julien.danjou.info/software/rainbow-mode">rainbow-mode</a> useful
when developing color themes. If fontifies strings that represent
color codes according to those colors. The mode is known to be a great
addition to css-mode, but I find it very helpful with color theme
development as well. It‚Äôs also included (and enabled) in Prelude by
default. Here you can see it in action.</p>

<p><img src="/assets/images/rainbow-mode.png" alt="rainbow-mode" /></p>

<p>The Emacs package manager <code class="language-plaintext highlighter-rouge">package.el</code> (formerly known as ELPA) is
gaining a lot of popularity lately and the community
<a href="http://marmalade-repo.org/">Marmalade</a> repository already houses a few
Emacs 24 themes that you can install from there. If you‚Äôre developing
a theme that you‚Äôd like to submit to Marmalade it‚Äôs imperative that
the theme modifies the <code class="language-plaintext highlighter-rouge">custom-theme-load-path</code> in an <code class="language-plaintext highlighter-rouge">autoload</code> -
otherwise it won‚Äôt be of much use. Add the following snippet (or
something similar) before the <code class="language-plaintext highlighter-rouge">provide-theme</code> line if your custom
theme:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">when</span> <span class="nv">load-file-name</span>
  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'custom-theme-load-path</span>
               <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="p">(</span><span class="nv">file-name-directory</span> <span class="nv">load-file-name</span><span class="p">))))</span>
</code></pre></div></div>

<p>I‚Äôd also advise you follow the proper naming convention
<code class="language-plaintext highlighter-rouge">name-theme.el</code> so that it‚Äôs apparent that your theme is <code class="language-plaintext highlighter-rouge">deftheme</code>
compatible.</p>

<p>Oh, and one more thing - porting themes from color-theme to deftheme is
really simple (just have a look at the old and the new version of
Zenburn in its repo), so you should really consider porting all the
themes you maintain to <code class="language-plaintext highlighter-rouge">deftheme</code>.</p>

<h1 id="epilogue">Epilogue</h1>

<p>Color theming in Emacs has never been easier. It‚Äôs time to kill
<code class="language-plaintext highlighter-rouge">color-theme</code> once and for all. If you‚Äôve ever developed a color theme
for it I urge you to convert it to the <code class="language-plaintext highlighter-rouge">deftheme</code> format and upload it
to Marmalade.</p>

<p>And if you‚Äôve never developed a color theme for Emacs because you were
afraid it was too hard - now is the time to do it.</p>
:ET