I"*<p>Newcomers to Ruby are often confused by the fact the <code class="language-plaintext highlighter-rouge">Object</code> class
defines three methods related to equality - <code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">eql?</code> and
<code class="language-plaintext highlighter-rouge">equal?</code>. Of the three the one that it’s easiest to describe is
<code class="language-plaintext highlighter-rouge">equal?</code> - it implements what’s commonly known as reference equality
check. The method returns <code class="language-plaintext highlighter-rouge">true</code> only if its receiver (the object upon
the method was invoked) and parameter (the object we’re comparing to) are
the same object (Java developers should think of the <code class="language-plaintext highlighter-rouge">==</code> operator
there).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">some_word</span> <span class="o">=</span> <span class="s2">"word"</span>
<span class="n">some_other_word</span> <span class="o">=</span> <span class="n">some_word</span>

<span class="n">some_word</span><span class="p">.</span><span class="nf">equal?</span> <span class="n">some_other_word</span> <span class="c1"># true</span>
</code></pre></div></div>

<p>Both <code class="language-plaintext highlighter-rouge">==</code> and <code class="language-plaintext highlighter-rouge">eql?</code> implement value equality checks - they are not
interested in whether two variables point to the same object in
memory, but whether two objects are equal in terms of their
values. For instance “cat” and “cat” might very well be two completely
different <code class="language-plaintext highlighter-rouge">String</code> objects, but they are quite obviously the same as
far as their value is concerned.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"cat"</span><span class="p">.</span><span class="nf">equal?</span> <span class="s2">"cat"</span>     <span class="c1"># false</span>
<span class="s2">"cat"</span> <span class="o">==</span> <span class="s2">"cat"</span>         <span class="c1"># true</span>
<span class="s2">"cat"</span><span class="p">.</span><span class="nf">eql?</span> <span class="s2">"cat"</span>       <span class="c1"># true</span>
</code></pre></div></div>

<p>What’s not immediately obvious is why are there two different
methods that seem to be doing exactly the same thing. The answer is
simple - <code class="language-plaintext highlighter-rouge">eql?</code> is meant to be used as a stricter version of <code class="language-plaintext highlighter-rouge">==</code>, if
there is a need for such stricter version.<code class="language-plaintext highlighter-rouge">eql?</code> most prominent usage
is probably in the <code class="language-plaintext highlighter-rouge">Hash</code> class, where it’s used to test members for equality.</p>

<p>In the <code class="language-plaintext highlighter-rouge">Object</code> class <code class="language-plaintext highlighter-rouge">eql?</code> is synonym with <code class="language-plaintext highlighter-rouge">==</code>. Most subclasses
continue this tradition, but there are a few classes that provide a
different implementation for <code class="language-plaintext highlighter-rouge">eql?</code>.  Numeric types, for example,
perform type conversion across <code class="language-plaintext highlighter-rouge">==</code>, but not across <code class="language-plaintext highlighter-rouge">eql?</code>, so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>       <span class="c1"># true</span>
<span class="mi">1</span><span class="p">.</span><span class="nf">eql?</span> <span class="mi">1</span>     <span class="c1"># true</span>
<span class="mi">1</span> <span class="o">==</span> <span class="mf">1.0</span>     <span class="c1"># true</span>
<span class="mi">1</span><span class="p">.</span><span class="nf">eql?</span> <span class="mf">1.0</span>   <span class="c1"># false</span>
<span class="mf">1.0</span><span class="p">.</span><span class="nf">eql?</span> <span class="mf">1.0</span> <span class="c1"># true</span>
</code></pre></div></div>

<p>As you can see clearly from this example - <code class="language-plaintext highlighter-rouge">eql?</code> for <code class="language-plaintext highlighter-rouge">Numeric</code> classes
requires both objects to be instances of the same class, apart from
having equal values, to return <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p>If you’re wondering about the origins of that convention I should probably
refer you to Common Lisp (one of the languages cited as principle
inspiration for Ruby). Common Lisp has <a href="http://eli.thegreenplace.net/2004/08/08/equality-in-lisp/">quite a few equality
predicates</a>,
dealing with various aspects of equality. I guess I never found <code class="language-plaintext highlighter-rouge">==</code>
and <code class="language-plaintext highlighter-rouge">eql?</code> in Ruby particularly confusing, because I knew Common Lisp,
before I started playing with Ruby.</p>

<p>Hopefully, I’ve managed to make the difference between <code class="language-plaintext highlighter-rouge">==</code> and <code class="language-plaintext highlighter-rouge">eql?</code>
clear. That’s some fairly esoteric matter that’s not totally
understood by even some fairly experienced Ruby developers.</p>
:ET