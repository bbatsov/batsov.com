I"á<p>The subject of todayâ€™s post is the following rule from the
<a href="https://github.com/rubocop-hq/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote>
  <p>Use <code class="language-plaintext highlighter-rouge">[*var]</code> or <code class="language-plaintext highlighter-rouge">Array()</code> instead of an explicit <code class="language-plaintext highlighter-rouge">Array</code> check, when dealing with a &lt;/br&gt;
variable you want to treat as an Array, but youâ€™re not certain itâ€™s &lt;/br&gt;
an array.</p>
</blockquote>

<p>Countless times Iâ€™ve seen code like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span><span class="p">]</span> <span class="k">unless</span> <span class="n">paths</span><span class="p">.</span><span class="nf">is_a?</span> <span class="no">Array</span>
<span class="n">paths</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<p>It seems that <code class="language-plaintext highlighter-rouge">paths</code> could be either an <code class="language-plaintext highlighter-rouge">Array</code> object or an object
of some other class. The author of the code needed to make sure
<code class="language-plaintext highlighter-rouge">paths</code> would be an array so he creates a single element array in the
case <code class="language-plaintext highlighter-rouge">paths</code> is not already an array.</p>

<p>While the above code works itâ€™s not something an experienced Rubyist
would write. The most popular alternative is the use of the mighty splat
operator(<code class="language-plaintext highlighter-rouge">*</code>):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">*</span><span class="n">paths</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<p>It case youâ€™re puzzled by the preceding snippet consider the following example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">elems</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">[</span><span class="o">*</span><span class="n">elems</span><span class="p">]</span>
<span class="c1"># =&gt; [1]</span>

<span class="n">elems</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="o">*</span><span class="n">elems</span><span class="p">]</span>
<span class="c1"># = [1, 2, 3]</span>
</code></pre></div></div>

<p>Hope that makes clear whatâ€™s going on.</p>

<p>While Iâ€™m extremely fond of this particular usage of <code class="language-plaintext highlighter-rouge">*</code> I tend to
avoid it, since there is another equally powerful, but more readable
alternative to it - <code class="language-plaintext highlighter-rouge">Kernel#Array</code>. Hereâ€™s it in action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Array</span><span class="p">(</span><span class="n">paths</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Array</code> looks like the name of class, but itâ€™s not. Itâ€™s a totally
normal method defined in the <code class="language-plaintext highlighter-rouge">Kernel</code> module. There is a whole family
of conversion methods similar to <code class="language-plaintext highlighter-rouge">Array</code> there - <code class="language-plaintext highlighter-rouge">Array</code>, <code class="language-plaintext highlighter-rouge">Complex</code>,
<code class="language-plaintext highlighter-rouge">Float</code>, <code class="language-plaintext highlighter-rouge">Hash</code>, <code class="language-plaintext highlighter-rouge">Integer</code>, <code class="language-plaintext highlighter-rouge">Rational</code> and <code class="language-plaintext highlighter-rouge">String</code>. They are all used
for often in practice and weâ€™ll probably revisit them in a separate
post somewhere down the road.</p>

<p>The <code class="language-plaintext highlighter-rouge">Array</code> method operates exactly like <code class="language-plaintext highlighter-rouge">*</code> - it takes a single argument and
converts it to an <code class="language-plaintext highlighter-rouge">Array</code> object if necessary:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; [1]</span>

<span class="no">Array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="c1"># =&gt; [1, 2, 3]</span>
</code></pre></div></div>

<p>You can also use <code class="language-plaintext highlighter-rouge">*</code> and <code class="language-plaintext highlighter-rouge">Array</code> to convert to array other data
composite data structures (like hashes and sets), but thatâ€™s
irrelevant to todayâ€™s discussion.</p>

<p>Thatâ€™s all I have for you today, mates. As usual Iâ€™m looking forward
to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
:ET