I"è<p>Sometimes we‚Äôd like to build a new collection object from the elements
of another collection.  One trivial example would be element
occurrence counting, which basically means you need to build a hash
from an array.</p>

<p>People coming from an imperative background will probably implement this in terms of <code class="language-plaintext highlighter-rouge">each</code> (or <code class="language-plaintext highlighter-rouge">for</code>):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">result</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># with each</span>
<span class="n">nums</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">result</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>

<span class="c1"># with for</span>
<span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="n">nums</span>
  <span class="n">result</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is a reasonable solution, but surely we can do better!</p>

<p>Rubyists fond of functional programming techniques might use <code class="language-plaintext highlighter-rouge">reduce</code> to solve the problem at hand:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">nums</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(</span><span class="no">Hash</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">e</span><span class="o">|</span> <span class="n">a</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">a</span> <span class="p">}</span>
<span class="c1"># =&gt; {1=&gt;2, 2=&gt;1, 3=&gt;2, 5=&gt;1}</span>
</code></pre></div></div>

<p>This code works well, but it‚Äôs a bit more complex than it needs to be -
mostly because of the need to return the hash explicitly in <code class="language-plaintext highlighter-rouge">reduce</code>‚Äôs block.
Enter <code class="language-plaintext highlighter-rouge">Enumerable#each_with_object</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">nums</span><span class="p">.</span><span class="nf">each_with_object</span><span class="p">(</span><span class="no">Hash</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
<span class="c1"># =&gt; {1=&gt;2, 2=&gt;1, 3=&gt;2, 5=&gt;1}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">each_with_object</code> invokes its block for each element with an
arbitrary object argument, and returns the initially given object,
thus eliminating the need to return it ourselves as the block‚Äôs
result. Simple and neat!</p>

<p>That‚Äôs all for now, folks. I hope you‚Äôll find this article useful.
As usual I‚Äôm looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
:ET