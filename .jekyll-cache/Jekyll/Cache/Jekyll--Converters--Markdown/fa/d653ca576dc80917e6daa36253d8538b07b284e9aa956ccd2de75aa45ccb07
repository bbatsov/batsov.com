I"G<p>Most experienced Rubyists probably know that there are two ways to interpolate instance, class and global variables into
strings.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compact notation (works only for instance/class/global vars)</span>
<span class="s2">"this is </span><span class="si">#$some_var</span><span class="s2">"</span>

<span class="c1"># standard notation (works for any expression)</span>
<span class="s2">"this is </span><span class="si">#{</span><span class="vg">$some_var</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<p>As you’ve noticed you can leave out the <code class="language-plaintext highlighter-rouge">{}</code> which can’t be left out for any other expression. Some people find this
interpolation syntax concise and elegant, but I’ll argue that it should be avoided. Here’s why:</p>

<ul>
  <li>You can’t use this notation in every possible scenario:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is fine</span>
<span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="vi">@variable</span><span class="si">}</span><span class="s2">string_straight_after_without_space"</span>

<span class="c1"># but this means something totally different</span>
<span class="nb">puts</span> <span class="s2">"</span><span class="si">#@variablestring_straight_after_without_space</span><span class="s2">"</span>
</code></pre></div></div>

<p>This means that using the compact notation only when applicable forces you to introduce some inconsistency in your code.
This is rarely good…</p>

<ul>
  <li>You’re using different notations for the same basic operation (interpolation), without getting anything in return.
That’s not the same with semantic use of single and double quoted strings or <code class="language-plaintext highlighter-rouge">fail</code> and <code class="language-plaintext highlighter-rouge">raise</code>.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># using compact</span>
<span class="s2">"this is </span><span class="si">#@x</span><span class="s2">"</span>
<span class="s2">"this is </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">"</span>

<span class="c1"># using standard</span>
<span class="s2">"this is </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">"</span>
<span class="s2">"this is </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<ul>
  <li>It’s easy to make a mistake in the context of a regular expression
(as interpolation works in regexp literals).  Recently I saw the
following regexp - <code class="language-plaintext highlighter-rouge">/[0-9.(),;:!?%#$?\x27\x22_+=\\\/\-]*/</code>. There’s a
subtle problem with it, that’s not obvious (unless you have a good
editor, that is). The sequence <code class="language-plaintext highlighter-rouge">#$?</code> is interpreted as interpolation
of the global variable <code class="language-plaintext highlighter-rouge">$?</code> (a.k.a. <code class="language-plaintext highlighter-rouge">$CHILD_STATUS</code>) and this regexp doesn’t work as intended.</li>
</ul>

<p>This scenario shows that the syntax was ill-conceived.</p>

<ul>
  <li>Non-experience Rubyists probably don’t know about the compact interpolation notation.
Few books and tutorials mention it these days, so using it your code will confuse at least
some of the people reading it.</li>
</ul>

<hr />

<p>It seems to me that Ruby will be better off without a special syntax
for variable interpolation. Ideally it would be removed in Ruby 3 and
we’ll have one less thing to worry about in our Ruby code.</p>

<p>That’s all for today, folks!</p>

<p>As usual I’m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
:ET