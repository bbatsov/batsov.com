I"˜<p><strong>Updated 29/04/2011</strong></p>

<p>Lately, Iâ€™ve started digging more and more into Rails, preparing for
the start of a Rails powered project. Although there are some IDEs
offering decent Rails support (namely RubyMine, NetBeans, Komodo and
Aptana Studio) I have always preferred the comfort of Emacs for
various reasons. So naturally I embarked on a quest to setup a
suitable environment for Rails development in Emacs. After a couple of
days of searching and evaluating possible solutions I finally set up a
worthy environment. It consists of a couple of components:</p>

<ul>
  <li><a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/ruby-mode.el?view=log">ruby-mode</a></li>
  <li><a href="http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/inf-ruby.el?view=log">inf-ruby</a></li>
  <li><a href="http://code.google.com/p/autopair/">autopair-mode</a></li>
  <li><a href="http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html">nxhtml-mode</a></li>
  <li><a href="http://code.google.com/p/yasnippet/">yasnippet</a></li>
  <li><a href="http://rinari.rubyforge.org/">rinari</a></li>
</ul>

<p>As you probably have guessed by now <code class="language-plaintext highlighter-rouge">ruby-mode</code> provides support for
editing ruby source files. The mode is pretty feature complete and
under active development, headed by none other than Matz (Rubyâ€™s
creator) himself. I can only assume that Matz is an Emacs user
himself. You can get it from the ruby svn repository if youâ€™re using a
version of Emacs older than Emacs 23 (itâ€™s built-in there).</p>

<p><code class="language-plaintext highlighter-rouge">inf-ruby</code> is a mode that spawns and inferior ruby process (e.g. an <code class="language-plaintext highlighter-rouge">irb</code> shell)
to which you can directly send code from the ruby buffer youâ€™re
currently editing. For instance - you can define a function and while
your cursor is inside it you can press <code class="language-plaintext highlighter-rouge">C-M-x</code> - the function definition
will be evaluated in <code class="language-plaintext highlighter-rouge">irb</code> automatically and you can test it there. This
is extremely handy!</p>

<p><code class="language-plaintext highlighter-rouge">autopair-mode</code> provides auto insertion of closing braces, quotes,
ends, etc. Itâ€™s a much more generic version of the <code class="language-plaintext highlighter-rouge">ruby-electric</code> mode
that used to do similar tasks, but just in Ruby buffers.</p>

<p>Although many people recommend adding <code class="language-plaintext highlighter-rouge">pabbrev</code> (a mode which
provides auto-completion) to the setup, I donâ€™t recommend it â€“ I find
the mode mostly annoying and stick to the old school dumb
auto-completion with <code class="language-plaintext highlighter-rouge">M-/</code>. If youâ€™re shopping for auto-completion,
however, a much better and smarter choice would be a
<a href="http://cx4a.org/software/rsense/">RSense</a>.</p>

<p><code class="language-plaintext highlighter-rouge">yasnippet</code> is a package that offers dynamically expandable code
snippets(template), quite similar to ones in TextMate. Itâ€™s very easy
to add your very own snippets if you wish to.</p>

<p><code class="language-plaintext highlighter-rouge">nxhtml-mode</code> is a pretty comprehensive package for web development in
general. We need it for its excellent support for erb
templates (<code class="language-plaintext highlighter-rouge">.rhtml</code>, <code class="language-plaintext highlighter-rouge">.erb.html</code>) and of course xhtml and css. Lately itâ€™s
not been as actively developed as it used to be, but itâ€™s still a
pretty good mode. Alternatively you can use
<a href="https://github.com/nex3/haml">Haml</a> and
<a href="https://github.com/antonj/scss-mode">SASS</a> and forget about
nxhtml. Both have pretty decent Emacs modes available.</p>

<p><code class="language-plaintext highlighter-rouge">rinari</code> is a mode for Rails development â€“ it contains rich
functionality such as the ability to easily navigate between models,
views and controllers in a Rails apfplication amongst other
features. Instructions how to set up rinari together with nxhtml-mode
can be found on rinariâ€™s home page.</p>

<p>Itâ€™s always a good idea to add <a href="http://ecb.sourceforge.net/">ecb</a> (the Emacs code browser) to the mix,
though this is entirely optional.</p>

<p>A lot of the stuff I discussed here are part of the
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> that I
develop and maintain. I urge you to use the Emacs Prelude as a starting point to
develop your very own customized version of Emacs. Prelude comes with a
few <code class="language-plaintext highlighter-rouge">ruby-mode</code> customizations, <code class="language-plaintext highlighter-rouge">yari</code> (<code class="language-plaintext highlighter-rouge">ri</code> integration for Emacs), haml and
sass modes, <code class="language-plaintext highlighter-rouge">autopair</code>, <code class="language-plaintext highlighter-rouge">yaml-mode</code>, <code class="language-plaintext highlighter-rouge">yasnippet</code>, <code class="language-plaintext highlighter-rouge">css-mode</code>, <code class="language-plaintext highlighter-rouge">ecb</code> and a lot of
other goodies (<a href="https://github.com/bbatsov/projectile">Projectile</a> being one of my favourites).</p>

<p>I hope you enjoy this setup and it helps boost your Rails productivity in Emacs.</p>
:ET