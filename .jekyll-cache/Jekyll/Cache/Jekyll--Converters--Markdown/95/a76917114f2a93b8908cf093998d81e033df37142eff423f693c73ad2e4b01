I"Ë<p>Todayâ€™s topic is the following rule from the <a href="https://github.com/rubocop-hq/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote>
  <p>Favor the use of <code class="language-plaintext highlighter-rouge">sprintf</code> and its alias <code class="language-plaintext highlighter-rouge">format</code> over the fairly &lt;/br&gt;
cryptic <code class="language-plaintext highlighter-rouge">String#%</code> method.</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">Kernel#sprintf</code> and <code class="language-plaintext highlighter-rouge">String#%</code> basically do the same thing - the main
difference is that <code class="language-plaintext highlighter-rouge">sprintf</code> is generally used as a command(it does
not operate on its receiver) and <code class="language-plaintext highlighter-rouge">String#%</code> is obviously an instance
method of the class <code class="language-plaintext highlighter-rouge">String</code>. Hereâ€™s the two of them in action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'%d %d'</span> <span class="o">%</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="c1"># =&gt; '20 10'</span>

<span class="nb">sprintf</span><span class="p">(</span><span class="s1">'%d %d'</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="c1"># =&gt; '20 10'</span>
</code></pre></div></div>

<p>So, considering they both do the same thing why should you opt to use
<code class="language-plaintext highlighter-rouge">sprintf</code> instead of <code class="language-plaintext highlighter-rouge">%</code>? Hereâ€™s a few reasons:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">%</code> takes either a single element or an array of elements as its
sole argument; <code class="language-plaintext highlighter-rouge">sprintf</code> consistently takes a variable number of
arguments.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'%d'</span> <span class="o">%</span> <span class="mi">20</span>
<span class="c1"># =&gt; '20'</span>

<span class="s1">'%d %d'</span> <span class="o">%</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="c1"># =&gt; '20 10'</span>

<span class="nb">sprintf</span><span class="p">(</span><span class="s1">'%d %d'</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="c1"># =&gt; '20'</span>

<span class="nb">sprintf</span><span class="p">(</span><span class="s1">'%d %d'</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="c1"># =&gt; '20 10'</span>
</code></pre></div></div>

<p>Personally, I dislike such inconsistencies a lot.</p>

<ul>
  <li>Itâ€™s not always clear what <code class="language-plaintext highlighter-rouge">%</code> means without additional
context. Take a look at this short snippet:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># a and b are variables</span>
<span class="n">a</span> <span class="o">%</span> <span class="n">b</span>
</code></pre></div></div>

<p>Without some knowledge of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> we cannot know if weâ€™re dealing
with a modulo operation (if <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> are fixnums), <code class="language-plaintext highlighter-rouge">String#%</code> or if
<code class="language-plaintext highlighter-rouge">a</code> is an instance of some other class which has implemented the <code class="language-plaintext highlighter-rouge">%</code>
method.</p>

<p>With <code class="language-plaintext highlighter-rouge">sprintf</code> itâ€™s always crystal-clear whatâ€™s going on.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">%</code> does not carry much of a semantic value in it.</li>
</ul>

<p>Sure, it was named so because of the <code class="language-plaintext highlighter-rouge">%</code> placeholders in the target
string, but people not familiar with that operator will probably be
confused by such odd-looking syntax. <code class="language-plaintext highlighter-rouge">sprintf</code> on the other hand is
old as time (so people reading your code have probably encountered it
somewhere before) and beside that itâ€™s fairly easy to remember that it
stands for <code class="language-plaintext highlighter-rouge">string print formatted</code> (or something similar). On a
related note - the use of <code class="language-plaintext highlighter-rouge">Kernel%sprintf</code>â€™s alias <code class="language-plaintext highlighter-rouge">format</code> yields
even better readability, since <code class="language-plaintext highlighter-rouge">format</code> is obviously less cryptic name
than <code class="language-plaintext highlighter-rouge">sprintf</code> and the same name is employed in many programming
languages (most notably <code class="language-plaintext highlighter-rouge">Java</code> and many Lisp dialects).</p>

<p>Thereâ€™s one thing about <code class="language-plaintext highlighter-rouge">sprintf/format</code> that I dislike, though. It
doesnâ€™t make that much sense to have such an operation as command in a
OO language like Ruby. Alas, those things are not up to me - I guess
the authors had something in mind when they made that particular
decision about the standard library.</p>

<p>In an ideal world the standard library would have included a
<code class="language-plaintext highlighter-rouge">String#format</code> method, that took variable number of arguments. For
some reason (unknown to me) - that has not happened (and maybe never
will). For now the use of <code class="language-plaintext highlighter-rouge">Kernel#sprintf</code> (and <code class="language-plaintext highlighter-rouge">Kernel#format</code>)
yields the best results when it comes down to code clarity and
consistency. I encourage you to use them (<code class="language-plaintext highlighter-rouge">format</code> in particular)!</p>

<p>As usual Iâ€™m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p><strong>Update</strong></p>

<p><code class="language-plaintext highlighter-rouge">String#format</code> is part of the <a href="https://github.com/bbatsov/powerpack">Powerpack library</a>.</p>
:ET