I".<p>Some Rubyists, when faced with the task of matching against the
beginning or the end of a string, are prone to using <code class="language-plaintext highlighter-rouge">^</code> and <code class="language-plaintext highlighter-rouge">$</code> in
their regular expressions. Most of the time the code will seem to work properly,
but… these anchors don’t actually match a string’s beginning and
end - they match a <strong>line</strong>’s beginning and end. Consider the
following example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="o">=</span> <span class="s1">'username'</span>
<span class="n">string</span><span class="p">[</span><span class="sr">/^username$/</span><span class="p">]</span>   <span class="c1"># matches (as expected)</span>
<span class="n">string</span> <span class="o">=</span> <span class="s2">"some injection</span><span class="se">\n</span><span class="s2">username"</span>
<span class="n">string</span><span class="p">[</span><span class="sr">/^username$/</span><span class="p">]</span>   <span class="c1"># matches again(WAT???)</span>
</code></pre></div></div>

<p>The anchors for beginning and end of a string are actually <code class="language-plaintext highlighter-rouge">\A</code> and
<code class="language-plaintext highlighter-rouge">\z</code>(there’s also a similar <code class="language-plaintext highlighter-rouge">\Z</code> anchor, but it’s rarely used in
practice):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="o">=</span> <span class="s2">"some injection</span><span class="se">\n</span><span class="s2">username"</span>
<span class="n">string</span><span class="p">[</span><span class="sr">/\Ausername\z/</span><span class="p">]</span> <span class="c1"># don't match</span>
</code></pre></div></div>

<p>In an actual application the line <code class="language-plaintext highlighter-rouge">string[/^username$/]</code> is a recipe for
disaster. That’s why Rails 4 started raising exceptions when <code class="language-plaintext highlighter-rouge">^</code> and
<code class="language-plaintext highlighter-rouge">$</code> are used in <code class="language-plaintext highlighter-rouge">validates :something, format: { with: /.../ }</code>.</p>

<p>By the way, this isn’t something specific to Ruby at all -  <code class="language-plaintext highlighter-rouge">\A</code> and <code class="language-plaintext highlighter-rouge">\z</code> are not the same
thing as <code class="language-plaintext highlighter-rouge">^</code> and <code class="language-plaintext highlighter-rouge">$</code> in most programming languages that have Perl-style regular expressions.</p>

<p>There’s something peculiar in Ruby, though - it automatically uses
<strong>multiline mode</strong> (which enables the aforementioned behaviour of
having <code class="language-plaintext highlighter-rouge">^</code> and <code class="language-plaintext highlighter-rouge">$</code> match per line) for regular expressions. Other
languages support it as well, but usually you need to enable it
yourself, since it’s not consider a particularly intuitive
default. For example - by default Perl, Java and C# treat <code class="language-plaintext highlighter-rouge">^</code> and <code class="language-plaintext highlighter-rouge">$</code> as
beginning/end of string until you <strong>explicitly</strong> enable <strong>multiline match mode</strong>
(<code class="language-plaintext highlighter-rouge">/m</code>). In Ruby <code class="language-plaintext highlighter-rouge">/m</code> simply allows <code class="language-plaintext highlighter-rouge">.</code> to match newlines.</p>

<p>I guess people, who’ve recently switched to Ruby from another
language, would be most susceptible to writing potentially dangerous
code like this.</p>

<p>That’s all for today folks. I hope you’ll find this article useful.
As usual I’m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
:ET