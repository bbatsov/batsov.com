I"3<p><code class="language-plaintext highlighter-rouge">String#gsub</code> is one of the most used Ruby methods in the wild. Just
about every Ruby programmer knows about the method and uses it fairly
regularly.</p>

<p>Here’s a quick refresher of the typical <code class="language-plaintext highlighter-rouge">gsub</code> usage:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># using string match</span>
<span class="s1">'John Wayne'</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="s1">'John'</span><span class="p">,</span> <span class="s1">'Bruce'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"Bruce Wayne"</span>

<span class="c1"># using regexp match</span>
<span class="s1">'John   Wayne'</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/\w+\s+(\w+)/</span><span class="p">,</span> <span class="s1">'Bruce \1'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"Bruce Wayne"</span>
</code></pre></div></div>

<p>Basically we can replace string and regexp matches with other
strings. When doing regexp matches we can access the matched groups
individually with <code class="language-plaintext highlighter-rouge">\1</code>, <code class="language-plaintext highlighter-rouge">\2</code>, etc and embed them in the replacement
string.  Sometimes, however, some additional processing of the matched
data might be required. Consider this trivial example - we might want
to increment a matched number by 1. Here <code class="language-plaintext highlighter-rouge">gsub</code>’s version that takes a
block comes into action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># num will be passed the string '12'</span>
<span class="s1">'Apollo 12'</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span><span class="p">.</span><span class="nf">to_i</span><span class="p">.</span><span class="nf">next</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="s2">"Apollo 13"</span>
</code></pre></div></div>

<p>Basically we’re replacing the matched portion of the string with the
result of the block. While the param enhances the readability of the code it’s not necessary:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we're not making use of a block param</span>
<span class="s1">'Apollo 12'</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/(\d+)/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Regexp</span><span class="p">.</span><span class="nf">last_match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">to_i</span><span class="p">.</span><span class="nf">next</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="s2">"Apollo 13"</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Regexp.last_match[1]</code> is the OO version of the obscure (but pretty
popular) Perlism <code class="language-plaintext highlighter-rouge">$1</code>. In this particular case using the block param
(as in the first example) is obviously a better idea.</p>

<p>Note that some people expect that <code class="language-plaintext highlighter-rouge">gsub</code> would yield to the block all
the matched groups as arguments - that is not the case, you’ll always
get a single argument denoting the entire regexp match.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># here name is 'Apollo 12' and number is blank</span>
<span class="s1">'Apollo 12'</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/(\w+) (\d+)/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="nb">name</span><span class="p">,</span> <span class="n">number</span> <span class="p">}</span>
</code></pre></div></div>

<p>Keep this in mind!</p>

<p>That’s all for today folks! I hope you’ll find this short article useful!</p>
:ET