I"≥Y<h2 id="prelude">Prelude</h2>

<blockquote>
  <p>If you are a professional writer ‚Äì i.e., if someone else is getting
paid to worry about how your words are formatted and printed ‚Äì Emacs
outshines all other editing software in approximately the same way
that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.</p>

  <p>‚Äì Neal Stephenson, In the Beginning ‚Ä¶ was the Command Line</p>
</blockquote>

<p>I‚Äôm an Emacs user and I‚Äôm proud of the fact. I know my reasons for
using it (and loving it) for many years now. But many people don‚Äôt. I
often get asked by various people the same question - ‚ÄúWhy should I
use Emacs? What makes it better than Eclipse/IntelliJ/vim/etc?‚Äù.</p>

<p>While I wouldn‚Äôt dare to claim that Emacs is better than all the IDEs
and competing editors I‚Äôll share here the things that I think are
making it great. But first‚Ä¶</p>

<!--more-->

<h2 id="a-text-editor-in-2011---are-you-mental-or-something">A Text Editor in 2011 - Are You Mental or Something?</h2>

<p>The simple fact is that the popularity of programmer‚Äôs text editors is
not as high as it once was. With so many integrated development
environments flying around traditional text editors like Emacs and Vim
seems to have fallen out of grace with the mainstream
users/programmers and are mostly used by enthusiasts and old school
hackers these days.</p>

<p>For all the good things IDEs have brought us (smart auto-completion,
nice visual debuggers, semantic analysis of the source code, etc) they
have totally forgot about the most crucial part of software
development - it‚Äôs mostly about editing text. And all the IDEs I‚Äôve
used have extremely poor text editing capabilities compared to likes
of Emacs and vim. A very trivial example is the fact that most IDEs
don‚Äôt even have keybindings optimized for touch typing - they require
you to move your hands often from the home row (such a waste) and have
mouse-centric UIs.</p>

<p>A programmer‚Äôs editor might not have all the fancy bells and
whistles, but it has the one thing that matters (should matter?) the
most - a good editing experience.</p>

<h2 id="the-road-to-emacs">The Road to Emacs</h2>

<p>I was not always an Emacs user. And wasn‚Äôt always an Unix user
either. My journey to computing started in the nineties when I was
doing some basic programming with Pascal in the Turbo Pascal
environment, notorious for its horrible editing features. Afterwards I
was drawn to the allure of C and C++ combined with Microsoft‚Äôs Visual
Studio IDE. At first I felt it was like magic - so much of the source
code got generated by various wizards and I felt productive. Felt is
the key word here. At some
point, however, I noticed that all the wizard started to become
annoying - I already knew what they were about the generate and
sometimes I even had a better idea about the details of a particular
piece of code. Writing code manually at some point always becomes more
productive than clicking through wizards.</p>

<p>Then I‚Äôve started my first professional gig in a company solely
devoted to FreeBSD, C and Perl. I had never used an Unix system before
and I captivated by the fact how much of its internals were open for the
user to tinker with and how many small tools were working together to
achieve a greater goal. I was also captivated by the editor that all my
colleagues in the company were using - vim. It was both simple and
profound - minimalistic UI, handy terminal support, plain-text
configuration, keybindings 100% optimized for touch typing and it had
so many cool editing features. I‚Äôve used vim for a couple of years, but two
things about it always bothered me - dealing with many files was no
fun (at least back than - as far I know vim 7 has made some
improvements in the area) and vimscript (the extension language for
vim) simply sucked.</p>

<p>I had often heard rumors of a mythical editor so powerful and some
infinite in its capabilities that people were afraid to approach
it. That editor‚Äôs name was Emacs. When I first started Emacs I had
absolutely no knowledge of Lisp what-so-ever, so dealing with it‚Äôs
configuration in the beginning was a bit hard - I often copied some
bits and piece of code that I didn‚Äôt fully understand and when there
was an error within some of those snippets, I was having a really hard
time figuring it out. Luckily for me I found a copy of <a href="http://www.amazon.com/Learning-Emacs-Third-Debra-Cameron/dp/0596006489/ref=sr_1_1?ie=UTF8&amp;qid=1321689125&amp;sr=8-1">Learning
Emacs</a> -
a nice (but not great) book that gently guided me through the
maelstrom of Emacs features. At first I was hardly efficient in Emacs,
but my proficiency in it quickly grew.</p>

<p>I had a bit of luck that I switched jobs and went to work in a company
where Emacs had God-like status. All the cool devs there were using it
and they were also hardcore Lisp hackers. There I learned the true
power of Emacs, there I got hooked to Lisp and there I truly
understand what Emacs is about.</p>

<blockquote>
  <p>Emacs is what you want it be. Emacs is power. But with great power,
comes great responsibility - the responsibility to think.</p>
</blockquote>

<h2 id="why-emacs">Why Emacs?</h2>

<p><img src="http://imgs.xkcd.com/comics/real_programmers.png" alt="real programmers" /></p>

<p>Enough small talk, let‚Äôs talk business‚Ä¶ Here‚Äôs a brief overview of
the things that make Emacs special (at least to me).</p>

<h4 id="divine-editing-experience">Divine Editing Experience</h4>

<p>You can easily navigate around text buffers, perform all sorts of
editing operations with a snap, without ever leaving the comfort of
the home row of your keyboard.</p>

<p>Emacs has support for some pretty fancy stuff like rectangular
editing, kill-ring (something like an internal clipboard history),
mark-ring (you can set points of interest in a buffer you can later
revisit), etc.</p>

<h4 id="everything-is-possible">Everything is Possible</h4>

<blockquote>
  <p>Emacs has got a mode for that!</p>

  <p>‚Äì Unknown Emacs Hacker, The Collected Emacs Sayings</p>
</blockquote>

<p>Naturally every popular programming language is well supported under
Emacs (with the notable exception of PHP, which has once of the lamest
Emacs modes I‚Äôve ever seen). Most not-so-popular programming
languages are well supported as well.</p>

<p>The quality and the features vary wildly though - some modes like
<a href="https://common-lisp.net/project/slime/">SLIME</a>, <code class="language-plaintext highlighter-rouge">cc-mode</code>, <code class="language-plaintext highlighter-rouge">js2-mode</code> and
<code class="language-plaintext highlighter-rouge">cperl-mode</code> are nothing short of magical and others provide only basic
highlighting and indentation support.</p>

<p>But this is only the tip of the iceberg - in Emacs you can easily
create beautifully typeset documents and books in LaTeX (with the help
of AUCTeX mode), charts with <code class="language-plaintext highlighter-rouge">graphviz-mode</code>, you can check your e-mail
with <code class="language-plaintext highlighter-rouge">gnus</code> (<code class="language-plaintext highlighter-rouge">wanderlust</code> and <code class="language-plaintext highlighter-rouge">mew</code> are other nice options), chat in IRC
with ERC, run a terminal session or write your next great blog
entry. And so many other things - there is even a <code class="language-plaintext highlighter-rouge">coffee-mode</code> that
allows you to control certain kinds of coffee machines from Emacs.</p>

<p>I happen to write all the articles on my site in Emacs and I publish
them to github pages using the excellent <a href="https://magit.vc/">magit</a> (git integration for
Emacs).</p>

<p>No matter what the task at hand is - you can rely on Emacs‚Äôs superb
editing capabilities.</p>

<h4 id="emacs-is-extensible">Emacs is Extensible</h4>

<p>The GNU Emacs manual describes Emacs as <em>the extensible, customizable,
self-documenting, real-time display editor</em>. And with a good reason -
it‚Äôs extremely easy to add new features to Emacs, due to its
integrated Emacs Lisp interpreter.</p>

<p>While there are some core things in Emacs, written in C for
efficiency‚Äôs sake, almost all the great modes and magic commands are
written in a dialect of Lisp, called Emacs Lisp (that is somewhat
reminiscent of Common Lisp, albeit lacking many of its features).</p>

<p>What this means is that you get the dynamic nature of Lisp development
for all of your Emacs extensions - you can write a small bit of Emacs
Lisp code anywhere, eval it and run it right away. There are no tedious
compilations steps or huge interfaces that have to be
implemented. There is virtually no ceremony. For
instance:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">prelude-google</span> <span class="p">()</span>
  <span class="s">"Googles a query or region if any."</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">browse-url</span>
   <span class="p">(</span><span class="nv">concat</span>
    <span class="s">"http://www.google.com/search?ie=utf-8&amp;oe=utf-8&amp;q="</span>
    <span class="p">(</span><span class="k">if</span> <span class="nv">mark-active</span>
        <span class="p">(</span><span class="nv">buffer-substring</span> <span class="p">(</span><span class="nv">region-beginning</span><span class="p">)</span> <span class="p">(</span><span class="nv">region-end</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">read-string</span> <span class="s">"Google: "</span><span class="p">)))))</span>
</code></pre></div></div>

<p>This simple bit of code adds to Emacs the ability to invoke Google
queries from it (with the help of your favorite browser). After
evaluating this code in Emacs you can simply type <code class="language-plaintext highlighter-rouge">M-x prelude-google</code>
and this new command will be at your disposal.</p>

<p>In Emacs it‚Äôs easy to create modes that support programming languages,
provide functionality such as IM and email checking, etc.</p>

<h4 id="emacs-integrates-well-with-lots-of-external-tools">Emacs Integrates Well with Lots of External Tools</h4>

<p>Running a shell from Emacs is easy - <code class="language-plaintext highlighter-rouge">M-x shell-mode</code>. Running a
terminal emulator in Emacs is just as easy - <code class="language-plaintext highlighter-rouge">M-x ansi-term</code>. And
there is even a shell written in Emacs Lisp, called <code class="language-plaintext highlighter-rouge">eshell</code>, that you
can use no matter what the underlying operating system is.</p>

<p>You need a file browser for Emacs - we have plenty! <code class="language-plaintext highlighter-rouge">Dired</code> is the
tried and try option, but there are ‚Äúmore modern‚Äù solutions such as
emacs-nav.</p>

<p>Version Control integration? You bet! CVS, SVN, bazaar, git,
mercurial - everything is supported out of the box!</p>

<p>You want to invoke a shell commands on the side? Nothing is easier.</p>

<p>You want to invoke <code class="language-plaintext highlighter-rouge">make</code>/<code class="language-plaintext highlighter-rouge">rake</code>/whatever from Emacs? Done and done.</p>

<p>You can even use Emacs as a process manager (<code class="language-plaintext highlighter-rouge">M-x proced</code>).</p>

<h4 id="emacs-doesnt-make-you-repeat-yourself">Emacs Doesn‚Äôt Make You Repeat Yourself</h4>

<p>Emacs supports everything in the playbook on DRY (Don‚Äôt Repeat
Yourself). Command repetition, prefix command arguments, keyboard
macros, Emacs Lisp functions, etc. I use them all - and I love them all.</p>

<h4 id="its-easy-to-share-an-editing-session-between-gui-and-terminal">It‚Äôs Easy to Share an Editing Session Between GUI and Terminal</h4>

<p>While many people prefer to do all their editing in the terminal or in
a GUI application - I don‚Äôt. I spend most of my time in a GUI Emacs
frame, but from time to time I occasionally fire Emacs from the
terminal to do some quick edit.</p>

<p>Emacs doesn‚Äôt start up as fast as vim, so I would be pretty pissed if
I had to wait for it to load every time. Luckily it has a feature
called Emacs daemon, which allows you to start a headless emacs server to
which you can afterwards connect to from both GUI and terminal
clients:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>emacs <span class="nt">--daemon</span>
<span class="nv">$ </span>emacsclient <span class="nt">-c</span>
<span class="nv">$ </span>emacsclient <span class="nt">-t</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">emacsclient -c</code> opens up a new Emacs GUI frame, while <code class="language-plaintext highlighter-rouge">emacsclient
-t</code> fires up a new terminal frame. And the best part - all the buffers
currently opened can be shared between as many clients as it pleases
you.</p>

<p>You can push the idea a notch further and connect to an Emacs daemon
running on a remote machine.</p>

<h4 id="emacs-is-modern">Emacs is Modern</h4>

<p>Contrary to what some people say about Emacs - it is a pretty modern piece of
software. On *BSD and Linux the GUI is implemented in GTK2/3, on OS X
it‚Äôs using Cocoa, and on Windows - it‚Äôs naturally using WinAPI. Emacs
integrates well with the OSes it runs on - for instance the OS‚Äôs
clipboard is integrated well with Emacs‚Äôs kill-ring out of the
box. Things like the Trash are also covered.</p>

<p>Emacs supports TTF fonts, has a built-in semantic code parser (called
Semantic), features a package manager that allows you retrieve Emacs
packages (extensions) from remote locations automatically (think of a
tool similar to <code class="language-plaintext highlighter-rouge">apt-get</code> or <code class="language-plaintext highlighter-rouge">brew</code> for Emacs packages).</p>

<h4 id="emacs-is-constantly-evolving">Emacs is Constantly Evolving</h4>

<p>Emacs has literally evolved before my eyes - when I started using it 7
years ago there was no support for truetype fonts, no Emacs daemon, no
built-in Semantic, no GTK2 UI, no package manager, etc. I cannot dare
to imagine what exciting changes are about to come‚Ä¶</p>

<h4 id="other-prominent-tools-use-emacss-keybindings">Other Prominent Tools Use Emacs‚Äôs keybindings</h4>

<p>Most shells (<code class="language-plaintext highlighter-rouge">bash</code>, <code class="language-plaintext highlighter-rouge">zsh</code>, etc) use Emacs keybindings by default. Most of
the Emacs keybindings are the same as those found in the readline
library. Apple‚Äôs Cocoa toolkit uses Emacs keybindings as well - I
guess this is one of the reasons why so many Emacs users love OS X.</p>

<h2 id="emacs-vs-the-world">Emacs vs the World</h2>

<h4 id="emacs-vs-vim">Emacs vs vim</h4>

<p>Emacs vs vim. The most epic battle of them all. More epic than Linux
vs Windows and Barcelona vs Real Madrid combined‚Ä¶ This, however, is
no flame post and I‚Äôll not be bashing vim here. I‚Äôll just mention my
brief (and highly personal take on the subject).</p>

<p>For me Emacs has these advantages over vim:</p>

<ul>
  <li>it has better <em>default</em> extension language. I haven‚Äôt wrote any vim
extension in Python/Ruby, but I can imagine it‚Äôs a much more
pleasant process than using vimscript.</li>
  <li>it‚Äôs modeless - switching constantly between command-mode and
editing mode is not very annoying, but I do prefer Emacs‚Äôs way</li>
  <li>it has better integration with external systems</li>
  <li>it has better support for the things that matter to me</li>
  <li>it has a built-in package manager</li>
  <li>it has better infrastructure for editing many files in the same session</li>
</ul>

<p>On the other side vim excels in a few areas for me:</p>

<ul>
  <li>nicer navigation</li>
  <li>much smaller core and much faster to load</li>
  <li>very simple initial config</li>
  <li>it has a more stylish icon than Emacs</li>
</ul>

<h4 id="emacs-vs-ides">Emacs vs IDEs</h4>

<p>Emacs is considered by many to be the prototype of modern IDEs, but
it‚Äôs quite different from most of them. IDEs main strengths are good
refactoring support, semantic code analysis, integrated GUI debuggers
and GUI design tools, precise auto-completions and good integration
with external systems such as version control and issue tracking.</p>

<p>IDEs main weakness are their poor editors and their dependency to the
mouse and an X environment in general. IDEs in general are not
particularly resource efficient either, but I guess that this matters
less and less as computers grow more and more powerful. Many people
(me included) have tried to use Emacs or vim keybindings in a IDE, but
it‚Äôs a pointless quest - without all of the features of Emacs/vim a
few keybindings are mostly useless.</p>

<p>For me the true problems of IDEs lies somewhere totally else and it‚Äôs
less mentioned. The IDEs impair your thinking by thinking instead of
you. I‚Äôve seen people generate a lot of code with IDEs without ever
questioning its workings or quality. When you produce everything
manually you‚Äôre much more likely to contemplate on its quality and to
consider ways to make it more concise and more elegant.</p>

<p>This, of course, is highly subjective - I mean no offense to IDE users
in general. I do, however, know very well the APIs I‚Äôve programmed in
Emacs and remember less about APIs I‚Äôve programmed in IntelliJ (for instance).</p>

<h2 id="emacs-is-not-perfect">Emacs is not Perfect</h2>

<p>Emacs is not perfect, of course. There a lot of things Emacs users
would still like to see.</p>

<h4 id="replace-emacs-lisp-with-scheme-or-common-lisp">Replace Emacs Lisp with Scheme or Common Lisp</h4>

<p>While Emacs Lisp has served Emacs well so far, it‚Äôs far from the best
Lisp dialects out there. While I‚Äôd personally like to see it swapped
for Common Lisp I guess this is never going to happen. There was,
however, a rumor last year that there is a long term plan to replace
Emacs Lisp with Scheme (GNU Guile to be precise). I have absolutely no
idea how much of a possibility that is - but I do know that we could
use a bit more powerful and a bit more modern extension language.</p>

<h4 id="improvements-to-the-gui">Improvements to the GUI</h4>

<p>While the GUIs in recent Emacs version were much improved there is
still much to be desired.</p>

<p>For instance - on OS X it would be nice if Emacs used Lion style
scrollbars and had support for the full-screen app mode. On OS X there
are some strange Cocoa bugs as well - like linum-mode looking
corrupted, etc.</p>

<p>I guess that currently Emacs‚Äôs GTK version has the nicest GUI of them
all, but it would good of the Windows and OS X port got some more love.</p>

<h4 id="multi-threading">Multi-threading</h4>

<p>Emacs is a single-threaded app and this is problematic, since tasks
that block that one thread for an extended period of time (like email
checking) tamper with Emacs‚Äôs responsiveness. Multi-threading support
is certainly coming to Emacs, but I cannot speculate with a
time-frame. I guess it will be part of Emacs 25 and we‚Äôre least a
few years away from it (Emacs 24 is still not released).</p>

<h4 id="integrate-semantic-tightly-into-emacs">Integrate Semantic tightly into Emacs</h4>

<p>Currently most programming modes in Emacs are implementing syntax
highlighting just by searching for regexp patterns. This is
notoriously fragile approach - especially in languages like Ruby, that
have a very complex grammar. Basing syntax highlighting on a semantic
analysis of the code would be much more robust. Not to mention that it
will open the gates for much more advanced features in Emacs
programming modes. I‚Äôve read somewhere that such tight integration
with Semantic is truly planned. We‚Äôll just have to wait and see (and
why not even help?). Of course there is the matter with backward compatibility‚Ä¶</p>

<h2 id="getting-started-with-emacs">Getting Started with Emacs</h2>

<p>OK, I‚Äôve told you some interesting things and I‚Äôve piqued your
interest in Emacs. Now you‚Äôre probably wondering how can you get
started with it. Knowing what I know now - I don‚Äôt recommend my
personal chaotic approach to mastering Emacs. Here‚Äôs a few tips to get
you started.</p>

<h4 id="obtain-a-copy-of-emacs-24">Obtain a copy of Emacs 24</h4>

<p>Emacs 23 is old news, Emacs 24 is the future. Take a look at my post
<a href="/articles/2011/10/09/getting-started-with-emacs-24/">Getting Started with Emacs 24</a> for more details.</p>

<h4 id="obtain-a-decent-initial-config">Obtain a Decent Initial Config</h4>

<p>The default configuration sucks. Luckily there is <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> -
Emacs 24 configuration that doesn‚Äôt suck. I highly recommend you to
use Prelude as your initial Emacs config. Studying its source will
give you a bit of an insight into Emacs Lisp programming</p>

<h4 id="read--practice">Read &amp; Practice</h4>

<ul>
  <li>first step - run the built-in Emacs tutorial - <code class="language-plaintext highlighter-rouge">C-h t</code></li>
  <li>second step - watch the excellent screencast <a href="https://peepcode.com/products/meet-emacs">Meet Emacs</a></li>
  <li>third step - visit <a href="https://emacsredux.com">Emacs Redux</a> and <a href="http://www.masteringemacs.org">Mastering Emacs</a></li>
  <li>forth step - read the official Emacs Manual - <code class="language-plaintext highlighter-rouge">C-h r</code></li>
  <li>fifth step - use Emacs day and night for all your work</li>
</ul>

<p>Check out this <a href="/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/">article</a> for way more Emacs resources.</p>

<h2 id="epilogue">Epilogue</h2>

<blockquote>
  <p>Emacs is undoubtedly the most powerful programmer‚Äôs editor in
existence. It‚Äôs a big, feature-laden program with a great deal of
flexibility and customizability. As we observed in the Chapter 14
section on Emacs Lisp, Emacs has an entire programming language inside
it that can be used to write arbitrarily powerful editor functions.</p>

  <p>‚ÄìEric S. Raymond, The Art of UNIX Programming</p>
</blockquote>

<p>Should you give Emacs a shot? I have absolutely no idea‚Ä¶ If you
found something in my post intriguing - I guess you should. If it was
to you like the ramblings of mad fanatic with no connection to the real
world - probably not.</p>

<p>I truly believe that anyone could gain something positive by spending
some time with Emacs and exploring its vision and culture. I guess
that in the end it all boils down to whether you‚Äôre ready to take the red pill‚Ä¶</p>
:ET