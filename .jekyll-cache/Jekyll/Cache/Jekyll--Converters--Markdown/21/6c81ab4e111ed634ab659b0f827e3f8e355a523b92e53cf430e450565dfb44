I"p<p>One task that often recurs in programming is the need to parse a
string representation a number(or several numbers) and convert it to
its numeric value. Parsing integer value in Common Lisp is fairly
straightforward process - we have the built-in function <strong>PARSE-INTEGER</strong>:</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">parse-integer</span> <span class="s">"100"</span><span class="p">)</span> <span class="c1">;; =&gt; 100</span>
<span class="p">(</span><span class="nb">parse-integer</span> <span class="s">"100"</span> <span class="ss">:radix</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;; =&gt; 4</span>
</code></pre></div></div>

<p>As you can see the function allows you to parse a string
representation of a number in an arbitrary base system(the default is
the <em>decimal</em>). With the keyword argument <strong>:radix</strong> you can specify a
base in the interval 2-36. The function has a few other fancy
capabilities as well - like the ability to process only a part of the
string that has been passed to it and to ignore junk in the input
string. For all the gory details refer to the
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_parse_.htm">Lisp HyperSpec</a>.</p>

<p>The problem that most Lisper face soon after is that there is no
matching function PARSE-FLOAT or PARSE-DOUBLE. I‚Äôm not sure what
technical reason is hidden beneath this design decision, but I know of
simple way to parse floating point numbers non-the-less. It‚Äôs built
around the <strong>READ</strong>(The R in REPL) function that allows you read any
S-expression from a string form. The READ function then returns a Lisp
object corresponding to the S-expression read. With that knowledge and
the fact that READ accepts as an optional argument an input stream
from which to read that S-expression(the default is the the standard
input) we can write the following bit of parsing code:</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">with-input-from-string</span> <span class="p">(</span><span class="nv">in</span> <span class="s">"3.14"</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">read</span> <span class="nv">in</span><span class="p">))</span>
</code></pre></div></div>

<p>Here we created an input stream that‚Äôs bound to the string ‚Äú3.14‚Äù and
read one S-expression from it - the floating point object 3.14.</p>

<p>We can even build a more general solution that parses several numbers
in a string, regardless of their actual type(integer or floating
point):</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">with-input-from-string</span> <span class="p">(</span><span class="nv">in</span> <span class="s">"3.14 5.646 4 9.6"</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nb">=</span> <span class="p">(</span><span class="nb">read</span> <span class="nv">in</span> <span class="no">nil</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">while</span> <span class="nv">x</span> <span class="nv">collect</span> <span class="nv">x</span><span class="p">))</span>
<span class="c1">;; =&gt; (3.14 5.646 4 9.6)</span>
</code></pre></div></div>

<p>Hopefully this short article has been helpful. You‚Äôve also witnessed
one of the practical benefits of having the code in Lisp represented
as data.</p>
:ET