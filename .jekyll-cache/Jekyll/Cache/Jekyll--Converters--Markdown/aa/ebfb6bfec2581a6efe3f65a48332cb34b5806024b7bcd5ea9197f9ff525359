I"<p>Every time I change my computer or my operating system<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, one of the first
things I have to do is to configure Git. This article simply covers the
basic Git settings that I always adjust.</p>

<p>So, here’s what I’d typically do:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># user identity</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> user.name <span class="s2">"Bozhidar Batsov"</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> user.email bozhidar@example.com
<span class="c"># editor to use by default for things like commit messages</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> core.editor emacs
<span class="c"># auto-rebase when pulling</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> pull.rebase <span class="nb">true</span>
<span class="c"># auto-convert CRLF to LF</span>
<span class="c"># useful if you're working on Windows and there are people on your team who are working on Unix</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> core.autocrlf <span class="nb">true</span>
<span class="c"># the name of the primary branch (formerly known as master)</span>
<span class="c"># that's a pretty recent setting, but it's useful for new projects</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> init.defaultBranch main
</code></pre></div></div>

<p>I guess for many people it’d also be useful to specify their preferred merge tool:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--global</span> merge.tool some-tool
</code></pre></div></div>

<p>To me, however, that’s irrelevant as almost all of the time I’m interacting with Git via
<a href="https://magit.vc/">Magit</a>. If you’re looking for an excuse to try out Emacs, you’ll be hard
pressed to find a better excuse than Magit.</p>

<p>The global Git user settings are simply stored under <code class="language-plaintext highlighter-rouge">~/.gitconfig</code>, so
you can easily review and update them there as well. You can check your
current configuration by running this command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--list</span>
</code></pre></div></div>

<p>Note that this effective configuration would be a combination of OS-wide config (e.g. <code class="language-plaintext highlighter-rouge">/etc/gitconfig</code>), your
user-wide config (e.g. <code class="language-plaintext highlighter-rouge">~/.gitconfig</code>) and the config of the Git repo that you’re currently in (e.g. `repo/.git/config).</p>

<p>When working on company projects, I would change for each company repository my email to
whatever my work email is:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>company-project
<span class="nv">$ </span>git config user.email bozhidar@company.com
</code></pre></div></div>

<p>If you’re working on multiple company repositories the above solution will quickly become annoying. In such
cases you may want to use <a href="https://git-scm.com/docs/git-config#_conditional_includes">Git conditional includes</a>,
which basically allow you to include a different configuration file in your main Git config, based so on some
rules.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> In our case we can have a different configuration for the e-mail based on the repository directory path. Here’s an example
<code class="language-plaintext highlighter-rouge">.gitconfig</code> to illustrate this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[includeIf "gitdir:personal/"]
  path = .gitconfig-personal
[includeIf "gitdir:work/"]
  path = .gitconfig-work
</code></pre></div></div>

<p>Now, any Git repository under a folder called <code class="language-plaintext highlighter-rouge">personal</code> (anywhere on your file
system) will use the personal email address, and any repository under a
folder called <code class="language-plaintext highlighter-rouge">work</code> will use your work email address.
This matches my preference to keep my personal projects under
<code class="language-plaintext highlighter-rouge">~/projects/personal</code> and the work under <code class="language-plaintext highlighter-rouge">~/projects/work</code>.</p>

<p>The contents of <code class="language-plaintext highlighter-rouge">.gitconfig-personal</code> can be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[user]
  email = bozhidar@home.com
</code></pre></div></div>

<p>And the contents of <code class="language-plaintext highlighter-rouge">.gitconfig-work</code> can be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[user]
  email = bozhidar@work.com
</code></pre></div></div>

<p>And that’s it. Turns out my basic Git setup is pretty basic. Check out <a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup">this section of the official docs</a>
for an expanded coverage of the topic. You can find way more configuration options <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">here</a>.</p>

<p>That’s all I have for you today. I’d appreciate it if you shared in the comments some snippets of Git configuration that
you consider essential.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>This has been happening quite often recently and I’ll cover it in a separate article or two. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Special thanks to my readers who suggested this setup to me. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET