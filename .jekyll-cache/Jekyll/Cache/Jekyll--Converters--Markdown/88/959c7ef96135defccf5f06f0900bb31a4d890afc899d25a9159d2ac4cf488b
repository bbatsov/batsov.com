I"](<p>For better or for worse Perl had significant influence over Ruby’s
initial design. A lot of things were directly borrowed from Perl, but
over the years the Ruby community rejected most of the Perlisms. In
this article I’ll go over most of the Perl legacy which you should try
to steer clear from.</p>

<h3 id="global-variables">Global variables</h3>

<p>Global variables are the nemesis of object-oriented programming(most
OO languages don’t even have the concept of a global variable). Don’t
introduce any of those in your Ruby programs! In most cases you can
substitute them for module instance variables:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># bad</span>
<span class="vg">$foo_bar</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">#good</span>
<span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="nb">attr_accessor</span> <span class="ss">:bar</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Foo</span><span class="p">.</span><span class="nf">bar</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Unfortunately, one cannot code Ruby and get away without using the built-in global
variables…</p>

<h3 id="special-global-variables">Special global variables</h3>

<p>Originally Ruby borrowed just about all of Perl’s special global
variables, known worldwide for their <strong>intention revealing names</strong> -
<code class="language-plaintext highlighter-rouge">$:</code>, <code class="language-plaintext highlighter-rouge">$;</code>, <code class="language-plaintext highlighter-rouge">$!</code>, <code class="language-plaintext highlighter-rouge">$$</code>, <code class="language-plaintext highlighter-rouge">$\</code>, etc. I’ve coded Ruby for quite some time now and
still can’t remember what half of those meant (and I knew a bit of
Perl before I knew any Ruby). Luckily at some point the
<a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/English/rdoc/English.html">English library</a>
was added to Ruby, which simply adds sensible aliases for the cryptic
Perl names. With it you can change this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$:</span><span class="p">.</span><span class="nf">unshift</span> <span class="no">File</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">)</span>

<span class="n">files</span> <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="vg">$\</span><span class="p">)</span>
</code></pre></div></div>

<p>to:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'English'</span>
<span class="vg">$LOAD_PATH</span><span class="p">.</span><span class="nf">unshift</span> <span class="no">File</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">)</span>

<span class="n">files</span> <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="vg">$INPUT_RECORD_SEPARATOR</span><span class="p">)</span>
</code></pre></div></div>

<p>I think that the improvement is pretty obvious.  Why <code class="language-plaintext highlighter-rouge">English</code> is not required by
default is beyond me. Personally I use it always and I think you should do the same.</p>

<h3 id="last-regexp-captures">Last regexp captures</h3>

<p>When you do a regexp match (like <code class="language-plaintext highlighter-rouge">/regexp/ ~= string</code>) a few special
global variables with funky names get populated with the prematch,
match, postmatch, etc. If the regexp has any groups in it, the stuff
they matched gets assigned to other special variables with the
descriptive names <code class="language-plaintext highlighter-rouge">$1</code> (for the first group), <code class="language-plaintext highlighter-rouge">$2</code> (for the second
group), etc. This idiom is unfortunately very popular with Ruby
developers, likely because few of them know of <code class="language-plaintext highlighter-rouge">Regexp.last_match</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sr">/(regexp)/</span> <span class="o">=~</span> <span class="n">string</span>
<span class="o">...</span>

<span class="c1"># this is Perl-style</span>
<span class="n">process</span> <span class="vg">$1</span>

<span class="c1"># this is the same, but more clear and more object oriented</span>
<span class="n">process</span> <span class="no">Regexp</span><span class="p">.</span><span class="nf">last_match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>Basically you can extract from <code class="language-plaintext highlighter-rouge">Regexp.last_match</code> everything you’d get from the special global variables.</p>

<p>Yep, you’ll have to type more, but when clarity is at stake a little bit of extra typing is certainly justified.</p>

<p>You can even go a step further and use the <code class="language-plaintext highlighter-rouge">Regexp#match</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">md</span> <span class="o">=</span> <span class="sr">/(Bat.+)\s/</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="s1">'Batman rules!'</span><span class="p">)</span>
<span class="c1">#=&gt; #&lt;MatchData "Batman " 1:"Batman"&gt;</span>
<span class="n">md</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1">#=&gt; "Batman"</span>
</code></pre></div></div>

<p>By the way, keep in mind that it’s generally a good idea to use named
regexp groups over positional ones, once you’re dealing with more than
two groups. Numbers simply don’t convey that much meaning…</p>

<h3 id="beginend-blocks">BEGIN/END blocks</h3>

<p>Strictly speaking those came from <code class="language-plaintext highlighter-rouge">awk</code>, but I still consider them
part of the Perl legacy. If you don’t know what I’m talking about feel
free to skip this section - your soul has already been saved.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">END</span> <span class="p">{</span>
  <span class="nb">puts</span> <span class="s2">"Exiting..."</span>
<span class="p">}</span>

<span class="nb">puts</span> <span class="s2">"Processing..."</span>

<span class="k">BEGIN</span> <span class="p">{</span>
  <span class="nb">puts</span> <span class="s2">"Starting..."</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BEGIN</code> blocks are executed before everything else in your program in
the order in which they are encountered. <code class="language-plaintext highlighter-rouge">END</code> blocks are executed right before
the program exits. Those hideous constructs mess with the flow of
control of the program and are totally useless. I’ve never ever needed
a <code class="language-plaintext highlighter-rouge">BEGIN</code> block and <code class="language-plaintext highlighter-rouge">END</code> blocks are totally replaceable with
<code class="language-plaintext highlighter-rouge">Kernel#at_exit</code>. I guess they might have some utility for old-school
scripting tasks, but application developers should ignore them
completely!</p>

<h3 id="flip-flops">Flip-flops</h3>

<p>Same as in the previous section - if you don’t know what I’m talking about feel free to
skip this section - your soul has already been saved.</p>

<p>Flip-flops are an obscure conditional construct with just a single useful application - text processing:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">DATA</span><span class="p">.</span><span class="nf">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
  <span class="nb">print</span> <span class="n">line</span> <span class="k">if</span> <span class="p">(</span><span class="n">line</span> <span class="o">=~</span> <span class="sr">/begin/</span><span class="p">)</span><span class="o">..</span><span class="p">(</span><span class="n">line</span> <span class="o">=~</span> <span class="sr">/end/</span><span class="p">)</span>
<span class="k">end</span>

<span class="cp">__END__
0a
1begin
2c
3end
4e
5f
6begin
7end
8i
9j
</span></code></pre></div></div>

<p>This will print:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1begin
2c
3end
6begin
7end
</code></pre></div></div>

<p>Hopefully you’ve managed to deduce how they work from this example, if
you haven’t - you’ve just understood what their main problem is.</p>

<p>I never had to use those and probably you won’t have a reason to use them
either. Their usage is likely going to do just one thing for you - reduce the
readability of the code you’re writing.</p>

<h3 id="epilogue">Epilogue</h3>

<p>I’d really love to see some of those Perlisms out of Ruby - the
removal of <code class="language-plaintext highlighter-rouge">flip-flops</code> and <code class="language-plaintext highlighter-rouge">BEGIN/END</code> gets suggested upstream every
now and then and might happen in Ruby 3.0. Removing the global
variables, however, is unlikely to ever happen since that would be a
huge change.</p>

<p>You can use <a href="https://github.com/bbatsov/rubocop">RuboCop</a>
to identify and fix such shortfalls of your code.</p>

<p>As usual I’m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
:ET