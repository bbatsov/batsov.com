I"H<p>From time to time you’ll need to inspect the contents of a locally
installed Ruby gem. For instance - I needed to check the contents
of my Jekyll theme (<code class="language-plaintext highlighter-rouge">minima</code>) earlier today, so I could override something
that was hardcoded there.</p>

<p>Each installed gem corresponds to a directory
in your local file system, so all you need to do is find out where
a particular gem resides. There are several ways to do this.
The first option is to use Ruby’s <code class="language-plaintext highlighter-rouge">gem</code> command directly:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem info minima

<span class="k">***</span> LOCAL GEMS <span class="k">***</span>

minima <span class="o">(</span>2.5.1<span class="o">)</span>
    Author: Joel Glovier
    Homepage: https://github.com/jekyll/minima
    License: MIT
    Installed at: /home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0

    A beautiful, minimal theme <span class="k">for </span>Jekyll.

<span class="nv">$ </span>gem contents minima
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/LICENSE.txt
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/README.md
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/_includes/disqus_comments.html
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/_includes/footer.html
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/_includes/google-analytics.html
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/_includes/head.html
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1/_includes/header.html
...
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">gem contents</code> command is extra useful as it effectively combines something like this in a single step:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem info gem-name
<span class="nv">$ </span><span class="nb">cd </span>gem-dir
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>You don’t really have to visit the folder in which the installed gem
resides to play with its contents. With <code class="language-plaintext highlighter-rouge">gem unpack</code> you can dump the
contents of any gem in the current folder:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem unpack minima
Unpacked gem: <span class="s1">'/home/bozhidar/minima-2.5.1'</span>
<span class="c"># You can also specify the folder in which to unpack the gem like this</span>
<span class="nv">$ </span>gem unpack minima <span class="nt">--target</span> ~/unpacked-gems
</code></pre></div></div>

<p>The main benefit of using <code class="language-plaintext highlighter-rouge">gem unpack</code> is that you can’t modify some gem by accident, with the added bonus that you’ll
get an easier to remember directory path.</p>

<p>An alternative option is to use <code class="language-plaintext highlighter-rouge">bundler</code> to procure the gem installation directory information (assuming you’re using it):</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle info minima

 <span class="k">*</span> minima <span class="o">(</span>2.5.1<span class="o">)</span>
        Summary: A beautiful, minimal theme <span class="k">for </span>Jekyll.
        Homepage: https://github.com/jekyll/minima
        Path: /home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1

<span class="c"># This is a variant of the previous command that returns only the gem path</span>
<span class="nv">$ </span>bundle info <span class="nt">--path</span> minima
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1
<span class="c"># Alternatively you can use Bundler's show command</span>
<span class="nv">$ </span>bundle show minima
/home/bozhidar/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/minima-2.5.1
</code></pre></div></div>

<p>Unfortunately, there’s no <code class="language-plaintext highlighter-rouge">bundler</code> equivalent of the <code class="language-plaintext highlighter-rouge">gem contents</code> command, but that’s not
that big of deal.</p>

<p>Bundler and <code class="language-plaintext highlighter-rouge">gem</code> actually have one more
extremely useful command that will directly open the gem’s folder in
your default editor:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem open minima
<span class="c"># or alternatively</span>
<span class="nv">$ </span>bundle open minima
</code></pre></div></div>

<p>Probably that’s my favorite way to navigate to an installed gem’s contents.</p>

<p>As you can imagine it’s pretty straight-forward to change the behavior of a gem - just go to its directory and
edit some of its contents. That’s an useful debugging technique, but it opens up one question - how to restore
a gem to its original pristine state? Well, turns out there’s a command for this as well:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem pristine gem-name
<span class="c"># or alternatively</span>
<span class="nv">$ </span>bundle pristine
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">bundler</code> command will restore all installed gems for a particular bundle to their original state.</p>

<p>That’s all I have for you today. I hope you learned something useful! Keep hacking!</p>
:ET